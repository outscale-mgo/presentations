#!/bin/bash

slide()
{
    txt="$@"
    clear
    echo -e "$txt" | ponysay +f gnupony
}

slide "About the underlayer Magic of my binary"

echo "(NOTE: a lot of things I'll say are lie, but true enough)"
read

clear
cat <<EOF

		     How I imagine a CPU reading instructions

         Instruction 110 add 1 to next mem element, and go to next instruction
   ---------------------------oo-----oo--------------------------------------------------------
		               \[110]/
			         \/
    -----------------------------|------------------------------------------------------
   /000/000/000/000/001/101/010/ V /110/001/110/010/110/110/000/000/000/000/000/000/000/ <- Memory content, mix of instructions and data.
  /___/___/___/___/___/___/___/___/___/___/__ /___/___/___/___/___/___/___/___/___/___/
   00  01  02  03  04  05  06  07  10  11  12  13  14  15  16  17  20  21  22  23  24  <- Memory adress

EOF
read
cat <<EOF

         Instruction 001 go to program start if next element in memory is not 0
   -----------------------------------oo-----oo--------------------------------------------------
		                       \[001]/
			                 \/
    -------------------------------------|----------------------------------------------
   /000/000/000/000/001/101/010/110/111/ V /110/010/110/110/000/000/000/000/000/000/000/ <- Memory content, mix of instructions and data.
  /___/___/___/___/___/___/___/___/___/___/__ /___/___/___/___/___/___/___/___/___/___/
   00  01  02  03  04  05  06  07  10  11  12  13  14  15  16  17  20  21  22  23  24  <- Memory adress

EOF
read

cat <<EOF
				     Program End
 -oo-----oo--------------------------------------------------------------------------------------
   \[000]/
     \/
    -|----------------------------------------------------------------------------------
   / V /000/000/000/001/101/010/110/111/001/110/010/110/110/000/000/000/000/000/000/000/ <- Memory content, mix of instructions and data.
  /___/___/___/___/___/___/___/___/___/___/__ /___/___/___/___/___/___/___/___/___/___/
   00  01  02  03  04  05  06  07  10  11  12  13  14  15  16  17  20  21  22  23  24  <- Memory adress

EOF
read

clear

cat <<EOF

Back in the modern days of Slayers Try airing on TV (the 90s)
Let's look at what some program VM (Virtual Memory) may look like:

-----																	  -----
|   |																	  |   |
|   |																	  |   |
|Dta|																	  |R  |
|---|																	  |---|
|Ins|																	  |R E|
|Ins|																	  |R E|
|---|																	  |---|
|   |  <---- memory, contain Data, and instructions in the same memory.                          					  |   |
|Dta|		       because CPU aknowledge that developer are inferior to machines, that add permision on they memory		  |RW |
|   |																	  |   |
|---|																	  |---|
|Ins|																	  |R E|
|---|																	  |---|
|   |																	  |   |
|   | Ins: Instructions															  |   |
|   | Dta: Data										        The same memory with it's permision ->    |   |
-----												R: read W: write E: exec          	  -----


EOF
read
clear

cat <<EOF
			    Kernel Slide Program


            _____________[start]__________
   _____ <-'  ________                   '--  ______
  /    /     /       /                       /      \   <----> [ Hard Drive ]
 /bin / <-> /runtime/ <== Interupt CPU ===> | Kernel |
 -----      --------                         \______/  <------> [ Display ]


 Interupt CPU: an angry guy comming to your open space...
 But for a CPU.

EOF
read
clear

cat <<EOF

     But program are store in files (not RAM), so what if we store Raw code in a file:

     File containing Raw code (let's call it program.COM)
       /
      V
    ______                             --------RAM--------
   /Code /  ----> [load in memory] -->  |              |
  /File /                               | [ File Here] | <-- It's load, but what about Memory permision ?
 /     /                                |              |     Also, what about libraries ? It's just RAW code.
 ------                                -------------------

EOF
read

cat <<EOF
 If your programs, contain only code:
 - it doesn't contain memory permisions
 - no information how to load lib.
 - syscall are usable, code from kernel use CPU instructions (int 0x80/sysenter/syscall)
 - that's how bootloarder use to work.
EOF
read
cat <<EOF
 If you wonder, yes you could make a program like this.

   [kenrel load program] -> -------- -> [program load lib + prog ] ->  -------- -> [program set up permision] -> --------
			    | ins  | 		          	       | Wine | 				 | ins  |
			    |  RWE | 			               |----- | 				 |  R E |
		            | Data | 			               | DLL  | 				 | Data |
	                    |  RWE | 			               |------| 				 |  RW  |
	       	            -------- 			               |XD.exe| 				 --------
								       --------
 But then it need to be call like this:
 wine [wine ARG] XD.exe [XD ARG]
 or like this
 php kattarshians.php


EOF
read
clear

cat <<EOF
                        /----------------------------------------- \\
                        | I'm ELF, Executable and Linkable Format  |
                        | My job is to contain every information   |
			| The OS need to load a binary             |
                ___,@   \------------------------------------------/
               /  <         /
          ,_  /    \  _,   /
      ?    \'/______\'/   /                   ------
   ,_(_).  |; (e  e) ;|  /	            / ELF   /
    \___ \ \/\   7  /\/ /  _\8/_           / STUFF /
        \/\   \'=='/---/  | /| /|         /------ /
         \ \___)--(_______|//|//|        / CODE  /
          \___  ()  _____/|/_|/_|       /       /
             /  ()  \    '----'	        -------
            /   ()   \				 Elf have typically 2 implementation:
           '-.______.-'				 1 minimal implem inside the kernel itself:
         _    |_||_|    _			 - use with execve
        (@____) || (____@)			 - can not load libraries
         \______||______/			 1 more complex in userland:
						 - implemented inside the libc (/lib/ld-linux.so.2)
						 - can load lib, and do versioning
						 - load the libc as a minimal runtime for your program
EOF
read
clear
cat <<EOF
PT_INTERP

PT_INTERP is a parametter of ELF format,
it enable to choose another useland ELF interpretter to handle currently read executable
compiller set this for every Dynamically compilled program
This is how ELF kernel reader fallback to /lib/ld-linux.so.2.

					 |=Kernel Elf Interp=|			 |==== l/ll.so.2=====|     -------------
    /----./bin----/			 |    /----./bin----/|			 |    /----./bin----/|	   | llibc.so  |
   /PT_INTERP:   /			 |   /PT_INTERP:   / |			 |   /PT_INTERP:   / |	   |---------- |
  / /l/ll.so.2  /  -> [execve (./bin)] ->|  / /l/ll.so.2  /  | -> [PT_INTERP] -> |  / /l/ll.so.2  /  | ->  |bin-lib.so |
 / 01011010101 /			 | / 01011010101 /   |			 | / 01011010101 /   |	   |-----------|
/_____________/				 |/_____________/    |			 |/_____________/    |	   |  ./bin    |
					 |___________________|			 |___________________|	   |           |
													   |           |
													   -------------
EOF
read
clear
cat <<EOF
Reminder:
Static: 1 binary file load by kernel
Dynamic: multiple binaries files load by libc
          Static				Dynamic
 -------------------------		 -------------------------
 |   _________________  |		 |    _____  ____       |
 |   / ______ ____  /   |		 |   /libc/ /lib/       |
 |  / /libc/ /lib/ /    |		 |   ----- /___/        |
 | / ------ /___/ /     |		 |    ---------         |
 |/   Program    /      |		 |  / Program /         |
 |----------------      |		 |  ---------           |
 -------------------------		 -------------------------
EOF
read
clear

cat <<EOF
Stuff to know:
- when a program is dynamic, it require lib by they major version (so if it need libncursesw.so.5, it can't use libncursesw.so.6)
- when a program is compiled statically, the compiler put the whole libc and other lib in the binary.
- musl have it's own program loader "/ld-musl-x86_64.so.1".

  |---- linux 1.1.52 -----|        |----- linux 3.5 -------|         |--------  5.2 ---------|
  |		          |	   |                       | 	     |                       |
  |(Dyn 1.1.52)       [OK]|	   |(Dyn 1.1.52)  [OK+lib?]| 	     |(Dyn 1.1.52)  [OK+lib?]|
  |(St 1.1.52)        [OK]|	   |(St 1.1.52)    [OK+CVE]| 	     |(St 1.1.52)    [OK+CVE]|
  |(St 5.2)           [KO]|	   |(St 5.2)           [OK]| 	     |(St 5.2)           [OK]|
  |(Dyn 5.2)          [KO]|	   |(Dyn 5.2)          [KO]| 	     |(Dyn 5.2)          [OK]|
  |(ld-linux.so.2|5.2)[KO]|	   |(ld-linux.so.2|5.2)[OK]| 	     |(ld-linux.so.2|5.2)[OK]|
  -------------------------	   ------------------------- 	     -------------------------
most compiled languages use a libc (so /lib/ld-linux.so.2). go is the only exeption.


EOF
read

clear
cat <<EOF
Static vs Dynamic

------------------------------------------------------------------------------------------------------------------
 Dynamic						     |    Static
------------------------------------------------------------------------------------------------------------------
 Pro                                                         | Pro
------------------------------------------------------------------------------------------------------------------
 - share lib, less disk space                                | - Can't have dependancies issue
 - can fix security in 1 lib				     |    (but can still have too old kernel)
    without updating whole program			     | - more standard with go
 - more standard for C/C++				     |
 - Hiden symbole, in a library				     |
------------------------------------------------------------------------------------------------------------------
 Con							     | con
------------------------------------------------------------------------------------------------------------------
 - missing dependancies (OS take care of lib)                | - a security issue, go repackage the whole program
 - missing old lib. (libX.so.2 instead of libX.so.1)         | - bloated (but who care ?)
 - lib ABI conflict. (but it's rare)                         |
------------------------------------------------------------------------------------------------------------------
EOF
read

cat <<EOF
Static vs Dynamic + packaging it's own bianry loader.

ex:
./ld-linux.so.2 --library-path libs/dir/containing/libc ./program

--------------------------------------------------------------------------------------------
Dynamic + ld-linux.so.2                     | Static
--------------------------------------------------------------------------------------------
 pro			                    | pro
--------------------------------------------------------------------------------------------
 - can be made from any program using ldd   | faster to startup (like less than 1ms faster)
			                    | slightly smaller (like less than 10ko smaller)
 - Hiden symbole, in a library		    |
--------------------------------------------------------------------------------------------
 con                                        | con
--------------------------------------------------------------------------------------------
 - need to create a script/                 | require .a libs.
    self extracted bin                      |
 - need to pay attention to lisence of libs |
--------------------------------------------------------------------------------------------

ther're mostly the same, seriously, if you don't live in the 90s (like ken), this debate is useless

for Dynamic + ld-linux.so.2, go see
https://gitlab.com/mojo42/mojopack/raw/master/mojopack.sh
http://joeyh.name/blog/entry/completely_linux_distribution-independent_packaging/

EOF
read

clear
cat <<EOF




                    | |
   ------------------------
  /   The real problem     \\
 |    _    _  of static    |
 |   /=\""/=\              |
 |  (=(0_0 |=)__           |
 |   \_\ _/_/   )    /--\\  |
 |     /_/   _  /\  |    | |
 |     |/ |\ || |   |    | |
 |       ~ ~  ~     |    | |
 ---------------------------
EOF
read
clear
tput setaf 2
cat <<EOF




                    | |
   -----------------------
  /    The real problem   \\
 |    _    _  of static    |
 |   /=\""/=\              |
 |  (=(0_0 |=)__           |
 |   \_\ _/_/ NV)    /--\\  |
 |     /_/ mesa /\  |    | |
 |     |/G|\ ||L|   |    | |
 |       ~ ~  ~     |    | |
 ---------------------------


[uso@ip-10-9-21-198 oapi-cli]$ ldd /usr/lib/libGL.so
        linux-vdso.so.1 (0x00007ffeda9da000)
        libGLdispatch.so.0 => /usr/lib/libGLdispatch.so.0 (0x00007f98126b0000)
        libGLX.so.0 => /usr/lib/libGLX.so.0 (0x00007f981267e000)
        libc.so.6 => /usr/lib/libc.so.6 (0x00007f9812497000)
        libX11.so.6 => /usr/lib/libX11.so.6 (0x00007f9812354000)
        /usr/lib64/ld-linux-x86-64.so.2 (0x00007f981280d000)
        libxcb.so.1 => /usr/lib/libxcb.so.1 (0x00007f9812329000)
        libXau.so.6 => /usr/lib/libXau.so.6 (0x00007f9812324000)
        libXdmcp.so.6 => /usr/lib/libXdmcp.so.6 (0x00007f981231a000)

EOF
tput sgr0
read

clear
cat <<EOF
Your new friend: LD_LIBRARY_PATH

LD_LIBRARY_PATH is use by ld-linux-x86-64.so.2
It set priority order to lib to load.
doesn't work for libc, but work for other lib
you can simply package your own lib
start your program with shell script setting LD_LIBRARY_PATH
EOF
read

cat <<EOF
[uso@ip-10-9-21-198 presentation]$ ldd /bin/ls
        linux-vdso.so.1 (0x00007fff37f40000)
        libcap.so.2 => /usr/lib/libcap.so.2 (0x00007fdde573b000) <-- is in /usr/lib/
        libc.so.6 => /usr/lib/libc.so.6 (0x00007fdde5554000)
        /lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fdde578a000)
[uso@ip-10-9-21-198 presentation]$ ls lib*
libcap.so.2
[uso@ip-10-9-21-198 presentation]$ LD_LIBRARY_PATH=./ ldd /bin/ls
        linux-vdso.so.1 (0x00007ffcc02f7000)
        libcap.so.2 => ./libcap.so.2 (0x00007fc4a9530000)  <--- is in ./libcap.so.2
        libc.so.6 => /usr/lib/libc.so.6 (0x00007fc4a932c000)
        /lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fc4a9562000)



Major con: glibc is backward compatible, not forward
program package using this methode will work only on system having a system with a glibc at last as recent as the one use to package your program:
A program package on the deprecated and outdated Debian 11 will work on the glorious Arch,
the same thing package on the absolutely fabulous Arch Linux BTW, will not run on the antique Debian 11.

more info:
https://gist.github.com/flibitijibibo/b67910842ab95bb3decdf89d1502de88
EOF

read

slide "BTW Appimage is basically LD_LIBRARY_PATH methode on steroide\n"

clear
cat <<EOF

                      ( NIX
                     (  ) (
                      )GUIX )
         |||||||     (  ( (
        ( O   O )        )
 ____oOO___(_)___OOo____(
(_______________________)
           FLATPAK

It's like a system in the system.

EOF

read

slide "The missing:\n" "deb/rpm/pacman other system package\n" "interpreted stuff (it's the interpretter job)"


